(()=>{var e={};e.id=856,e.ids=[856],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},25514:()=>{},27407:(e,r,t)=>{"use strict";t.r(r),t.d(r,{patchFetch:()=>h,routeModule:()=>x,serverHooks:()=>g,workAsyncStorage:()=>f,workUnitAsyncStorage:()=>m});var s={};t.r(s),t.d(s,{DELETE:()=>c,PUT:()=>d});var i=t(41220),o=t(79257),a=t(94320),n=t(69789),u=t(29021),p=t(33873),l=t(90314);let d=async e=>{let r=new URL(e.url).searchParams.get("fileName");if(!r)return n.NextResponse.json({error:"Filename is required in the URL"},{status:400});let t=(0,p.join)(process.cwd(),l.MQ);(0,u.existsSync)(t)||(0,u.mkdirSync)(t,{recursive:!0});let s=(0,p.join)(t,r),i=(0,u.createWriteStream)(s);try{let r=e.body;if(!r)return n.NextResponse.json({error:"Request body is empty"},{status:400});let t=r.getReader(),{value:s,done:o}=await t.read();if(o||!s||0===s.length)return n.NextResponse.json({error:"Request body is empty or invalid"},{status:400});i.write(Buffer.from(s));let a=!1;for(;!a;){let{value:e,done:r}=await t.read();e&&i.write(Buffer.from(e)),a=r}return i.end(),n.NextResponse.json({success:!0})}catch(e){return n.NextResponse.json({error:e.message||"File upload failed"},{status:500})}},c=async e=>{let r=new URL(e.url).searchParams.get("fileName");if(!r)return n.NextResponse.json({error:"Filename is required in the URL"},{status:400});let t=(0,p.join)(process.cwd(),l.MQ),s=(0,p.join)(t,r);try{if(!(0,u.existsSync)(s))return n.NextResponse.json({error:"File does not exist"},{status:404});return(0,u.unlinkSync)(s),n.NextResponse.json({success:!0})}catch(e){return n.NextResponse.json({error:e.message||"File deletion failed"},{status:500})}},x=new i.AppRouteRouteModule({definition:{kind:o.RouteKind.APP_ROUTE,page:"/api/upload-file/route",pathname:"/api/upload-file",filename:"route",bundlePath:"app/api/upload-file/route"},resolvedPagePath:"/Volumes/Primary/projects/cunguyendev/mela-digital/apps/file-uploader/src/app/api/upload-file/route.ts",nextConfigOutput:"",userland:s}),{workAsyncStorage:f,workUnitAsyncStorage:m,serverHooks:g}=x;function h(){return(0,a.patchFetch)({workAsyncStorage:f,workUnitAsyncStorage:m})}},29021:e=>{"use strict";e.exports=require("fs")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},33873:e=>{"use strict";e.exports=require("path")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},70917:(e,r,t)=>{"use strict";t.d(r,{M:()=>o,e:()=>i});let s=JSON.parse('{"rE":"0.0.18","h_":"Support for multiple file types and sizes"}'),i={name:"File Uploader",description:s.h_,version:s.rE,githubOrgUrl:"https://github.com/Mela-Digital",githubRepoUrl:"https://github.com/Mela-Digital/file-uploader"},o=process.env.UPLOADED_FOLDER??"_uploads"},88562:()=>{},90314:(e,r,t)=>{"use strict";t.d(r,{MQ:()=>s.M});var s=t(70917)}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[320,376],()=>t(27407));module.exports=s})();